package exceltemplar

import (
	"encoding/json"
	"fmt"
	"log"
	"regexp"
	"strings"
	"time"
)

// sanitizeJSONBlock –∏–∑–≤–ª–µ–∫–∞–µ—Ç JSON, –æ–±—ë—Ä–Ω—É—Ç—ã–π –≤ —Ç—Ä–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ ``` ... ```.
// –ï—Å–ª–∏ —Ç–∞–∫–∏—Ö –∫–∞–≤—ã—á–µ–∫ –Ω–µ—Ç, –ª–∏–±–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É.
var fenceRx = regexp.MustCompile("(?s)```[a-zA-Z]*\\n(.*?)```")

func sanitizeJSONBlock(s string) string {
	if !strings.Contains(s, "```") {
		return s
	}
	m := fenceRx.FindStringSubmatch(s)
	if len(m) >= 2 {
		return strings.TrimSpace(m[1])
	}
	return s
}

// valToCell –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é –≤ Excel.
func valToCell(v interface{}) interface{} {
	if v == nil {
		return ""
	}
	switch vv := v.(type) {
	case string:
		return vv
	case []interface{}:
		allStr := true
		strs := make([]string, len(vv))
		for i, it := range vv {
			if s, ok := it.(string); ok {
				strs[i] = s
			} else {
				allStr = false
				break
			}
		}
		if allStr {
			return strings.Join(strs, ", ")
		}
		b, _ := json.Marshal(vv)
		return string(b)
	default:
		return fmt.Sprintf("%v", vv)
	}
}

// WriteResultsWithTemplate –æ—Å—Ç–∞–≤–ª—è–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
func WriteResultsWithTemplate(templatePath, destPath string, outputs []string) error {
	log.Printf("üìä –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Excel...")
	log.Printf("üìÅ –®–∞–±–ª–æ–Ω: %s", templatePath)
	log.Printf("üìÑ –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: %s", destPath)
	log.Printf("üìù –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–ø–æ–≤ –¥–ª—è –∑–∞–ø–∏—Å–∏: %d", len(outputs))

	startTime := time.Now()

	// –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥–æ–≥–æ —ç—Ç–∞–ø–∞
	for i, output := range outputs {
		log.Printf("üìä –≠—Ç–∞–ø %d: %d —Å–∏–º–≤–æ–ª–æ–≤", i+1, len(output))
	}

	log.Printf("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ Excel —à–∞–±–ª–æ–Ω–∞...")
	tmpl, err := LoadTemplate(templatePath)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–∞: %v", err)
		return err
	}
	log.Printf("‚úÖ –®–∞–±–ª–æ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")

	// –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º JSON –ø–µ—Ä–µ–¥ —Ä–µ–Ω–¥–µ—Ä–æ–º –¥–ª—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
	normalized := NormalizeForExcel(outputs)

	log.Printf("üîÑ –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –≤ —à–∞–±–ª–æ–Ω...")
	if err := tmpl.Render(normalized); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞: %v", err)
		return err
	}
	log.Printf("‚úÖ –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω")

	log.Printf("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞...")
	if err := tmpl.Save(destPath); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: %v", err)
		return err
	}

	duration := time.Since(startTime)
	log.Printf("‚úÖ Excel —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω –∑–∞ %v", duration)
	log.Printf("üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: %s", destPath)

	return nil
}
